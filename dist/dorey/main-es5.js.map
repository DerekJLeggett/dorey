{"version":3,"sources":["webpack:///src/app/app.component.html","webpack:///src/app/auto/auto.component.html","webpack:///src/app/covid/covid.component.html","webpack:///src/app/derek/derek.component.html","webpack:///src/app/dunkin/dunkin.component.html","webpack:///src/app/home/home.component.html","webpack:///src/app/library/library.component.html","webpack:///src/app/lindsey/lindsey.component.html","webpack:///src/app/lori/lori.component.html","webpack:///src/app/marvel/marvel.component.html","webpack:///src/app/natgeo/natgeo.component.html","webpack:///src/app/nps/nps.component.html","webpack:///src/app/performance/performance.component.html","webpack:///src/app/places/places.component.html","webpack:///src/app/population/population.component.html","webpack:///src/app/recreation/recreation.component.html","webpack:///src/app/ships/ships.component.html","webpack:///src/app/snap/snap.component.html","webpack:///src/app/swapi/swapi.component.html","webpack:///src/app/world/world.component.html","webpack:///src/$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.css","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/auto/auto.component.css","webpack:///src/app/auto/auto.component.ts","webpack:///src/app/auto/auto.service.ts","webpack:///src/app/covid/covid.component.css","webpack:///src/app/covid/covid.component.ts","webpack:///src/app/covid/covid.service.ts","webpack:///src/app/derek/derek.component.css","webpack:///src/app/derek/derek.component.ts","webpack:///src/app/derek/derek.service.ts","webpack:///src/app/dunkin/dunkin.component.css","webpack:///src/app/dunkin/dunkin.component.ts","webpack:///src/app/dunkin/dunkin.service.ts","webpack:///src/app/home/home.component.css","webpack:///src/app/home/home.component.ts","webpack:///src/app/library/library.component.css","webpack:///src/app/library/library.component.ts","webpack:///src/app/lindsey/lindsey.component.css","webpack:///src/app/lindsey/lindsey.component.ts","webpack:///src/app/lori/lori.component.css","webpack:///src/app/lori/lori.component.ts","webpack:///src/app/lori/lori.service.ts","webpack:///src/app/marvel/marvel.component.css","webpack:///src/app/marvel/marvel.component.ts","webpack:///src/app/marvel/marvel.service.ts","webpack:///src/app/natgeo/natgeo.component.css","webpack:///src/app/natgeo/natgeo.component.ts","webpack:///src/app/natgeo/natgeo.service.ts","webpack:///src/app/nps/nps.component.css","webpack:///src/app/nps/nps.component.ts","webpack:///src/app/nps/nps.service.ts","webpack:///src/app/performance/performance.component.css","webpack:///src/app/performance/performance.component.ts","webpack:///src/app/performance/performance.service.ts","webpack:///src/app/places/places.component.css","webpack:///src/app/places/places.component.ts","webpack:///src/app/places/places.service.ts","webpack:///src/app/population/population.component.css","webpack:///src/app/population/population.component.ts","webpack:///src/app/recreation/recreation.component.css","webpack:///src/app/recreation/recreation.component.ts","webpack:///src/app/recreation/recreation.service.ts","webpack:///src/app/shared/state.service.ts","webpack:///src/app/ships/ships.component.css","webpack:///src/app/ships/ships.component.ts","webpack:///src/app/ships/ships.service.ts","webpack:///src/app/snap/snap.component.css","webpack:///src/app/snap/snap.component.ts","webpack:///src/app/swapi/swapi.component.css","webpack:///src/app/swapi/swapi.component.ts","webpack:///src/app/swapi/swapi.service.ts","webpack:///src/app/world/world.component.css","webpack:///src/app/world/world.component.ts","webpack:///src/app/world/world.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","pathMatch","redirectTo","component","AppRoutingModule","imports","forRoot","AppComponent","title","selector","template","AppModule","declarations","register","enabled","production","providers","bootstrap","AutoComponent","autoService","getVehicleTypes","subscribe","response","types","type","getMakesByType","makesByType","makeId","getModelsByMakeId","models","getAllManufacturers","autoManufacturer","autoManufacturers","name","getManufacturerDetails","details","manufacturerDetails","getMakesByManufacturer","makes","httpOptions","headers","AutoService","http","getManufacturersURL","getManufacturerDetailsURL","getMakeForManufacturerURL","getMakeByTypeURL","getModelsByMakeIdURL","get","pipe","handleError","operation","result","error","console","providedIn","CovidComponent","covidService","covidCounts","getCovidCounts","CovidService","DerekComponent","derekService","dereksLinks","getLinks","DerekService","DunkinComponent","dunkinService","stateService","states","getStates","state","getDunkinByState","dunkin","dunkins","DunkinService","latitude","longitude","HomeComponent","LibraryComponent","LindseyComponent","LoriComponent","loriService","lorisLinks","LoriService","MarvelComponent","marvelService","series","characters","characterById","getCharacters","getCharacterById","getSeries","serie","MarvelService","baseUrl","apiKey","log","NatgeoComponent","natgeoService","videos","getVideos","NatgeoService","NpsComponent","npsService","parks","stateCode","getParks","NpsService","PerformanceComponent","performanceService","performance","industries","getIndustries","industryId","getTimingsByIndustryId","PerformanceService","PlacesComponent","placesService","places","navigator","geolocation","getCurrentPosition","pos","coords","lat","getPlaces","PlacesService","long","PopulationComponent","RecreationComponent","recreationService","organizations","recreationalAreas","getOrganizations","getRecreationalAreasByState","RecreationService","StateService","ShipsComponent","shipsService","ships","shipTypes","getShipTypes","shipType","getShipsByType","ship","selectedShip","ShipsService","SnapComponent","SwapiComponent","swapiService","getFilms","films","sort","episode_id","selectedFilm","find","film","getPlanets","getStarships","getSpecies","getVehicles","entry","getCharacter","push","character","selectedCharacter","planets","getPlanet","planet","selectedPlanet","starShips","starships","getStarship","starShip","selectedStarShip","vehicles","getVehicle","vehicle","selectedVehicle","species","specie","selectedSpecie","SwapiService","url","WorldComponent","worldService","countries","getCountriesNestedLanguages","countryCode","country","Code","getStatesNestedCitiesByCountryCode","WorldService","environment","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["export default \"<nav>\\n  <div class=\\\"nav nav-tabs\\\" id=\\\"nav-tab\\\" role=\\\"tablist\\\">\\n    <a class=\\\"nav-item nav-link active h4\\\" id=\\\"nav-home-tab\\\" data-toggle=\\\"tab\\\" href=\\\"#\\\" role=\\\"tab\\\"\\n      aria-controls=\\\"nav-home\\\" aria-selected=\\\"true\\\" routerLink=\\\"home\\\">Home</a>\\n    <a class=\\\"nav-item nav-link h4\\\" id=\\\"nav-lori-tab\\\" data-toggle=\\\"tab\\\" href=\\\"#\\\" role=\\\"tab\\\" aria-controls=\\\"nav-profile\\\"\\n      aria-selected=\\\"false\\\" routerLink=\\\"lori\\\">Lori</a>\\n    <a class=\\\"nav-item nav-link h4\\\" id=\\\"nav-lindsey-tab\\\" data-toggle=\\\"tab\\\" href=\\\"#\\\" role=\\\"tab\\\"\\n      aria-controls=\\\"nav-contact\\\" aria-selected=\\\"false\\\" routerLink=\\\"lindsey\\\">Lindsey</a>\\n    <a class=\\\"nav-item nav-link h4\\\" id=\\\"nav-derek-tab\\\" data-toggle=\\\"tab\\\" href=\\\"#\\\" role=\\\"tab\\\" aria-controls=\\\"nav-profile\\\"\\n      aria-selected=\\\"false\\\" routerLink=\\\"derek\\\">Derek</a>\\n    <a class=\\\"nav-item nav-link h4\\\" id=\\\"nav-covid-tab\\\" data-toggle=\\\"tab\\\" href=\\\"#\\\" role=\\\"tab\\\" aria-controls=\\\"nav-profile\\\"\\n      aria-selected=\\\"false\\\" routerLink=\\\"covid\\\">Covid-19</a>\\n  </div>\\n</nav>\\n<router-outlet></router-outlet>\\n<footer class=\\\"container-fluid\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-lg-12 text-center\\\">\\n      <a href=\\\"#\\\">\\n        <img src=\\\"/assets/images/mailbox.gif\\\" alt=\\\"mailbox\\\" />\\n      </a>\\n      <br>\\n      <a href=\\\"#\\\">\\n        <img src=\\\"/assets/images/0342.gif\\\" alt=\\\"mailbox\\\" />\\n      </a>\\n      <h3 class=\\\"text-center\\\">Created by Lori Leggett - 1/13/01</h3>\\n    </div>\\n  </div>\\n</footer>\";","export default \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <form>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"typeSelect\\\" class=\\\"sr-only\\\">Select a vehicle type</label>\\n          <select class=\\\"custom-select\\\" id=\\\"typeSelect\\\" (change)=\\\"getMakesByType($event.target.value)\\\">\\n            <option selected class=\\\"text-center\\\">Select a vehicle type</option>\\n            <option *ngFor=\\\"let type of types\\\" class=\\\"text-center\\\" value=\\\"{{type.type}}\\\">\\n              {{type.type}}\\n            </option>\\n          </select>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <form>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"makeSelect\\\" class=\\\"sr-only\\\">Select a manufacturer</label>\\n          <select class=\\\"custom-select\\\" id=\\\"makeSelect\\\" (change)=\\\"getModelsByMakeId($event.target.value)\\\">\\n            <option selected class=\\\"text-center\\\">Select a manufacturer</option>\\n            <option *ngFor=\\\"let make of makesByType\\\" class=\\\"text-center\\\" value=\\\"{{make.MakeId}}\\\">\\n              {{make.MakeName}}\\n            </option>\\n          </select>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col text-center\\\">\\n      <h4 class=\\\"text-center\\\">Models</h4>\\n      <div *ngFor=\\\"let model of models\\\">\\n        {{model.Model_Name}}\\n      </div>\\n    </div>\\n  </div>\\n  <a href=\\\"https://vpic.nhtsa.dot.gov/api/Home\\\" target=\\\"_blank\\\">Data Provided by Vehicle API</a>\\n</div>\";","export default \"<div class=\\\"container-fluid\\\">\\n    <a href=\\\"https://covid19.who.int\\\" target=\\\"_blank\\\">Data provided by the World Health Organization, Data current as of\\n        {{covidCounts[0].Date_reported}}</a>\\n    <div class=\\\"row no-gutters\\\" *ngFor=\\\"let covidCount of covidCounts\\\">\\n        <div class=\\\"col-1\\\">\\n            <img class=\\\"img-fluid svg\\\" title=\\\"{{covidCount.Country_code}}\\\"\\n                src=\\\"assets/images/flags/svg/{{covidCount.Country_code | lowercase}}.svg\\\">\\n        </div>\\n        <div class=\\\"col-11\\\">\\n            <div class=\\\"progress\\\" style=\\\"height: 50px\\\">\\n                <div class=\\\" progress-bar bg-danger\\\" role=\\\"progressbar\\\"\\n                    [style.width.%]=\\\"((covidCount.Cumulative_deaths/covidCounts[0].Cumulative_cases)*100)\\\"\\n                    aria-valuenow=\\\"((covidCount.Cumulative_deaths/covidCounts[0].Cumulative_cases)*100)\\\"\\n                    aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\">\\n                    {{covidCount.Cumulative_deaths | number}}</div>\\n                <div class=\\\"progress-bar bg-warning\\\" role=\\\"progressbar\\\"\\n                    [style.width.%]=\\\"(((covidCount.Cumulative_cases - covidCount.Cumulative_deaths)/covidCounts[0].Cumulative_cases)*100)\\\"\\n                    aria-valuenow=\\\"(((covidCount.Cumulative_cases - covidCount.Cumulative_deaths)/covidCounts[0].Cumulative_cases)*100)\\\"\\n                    aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\">\\n                    {{covidCount.Cumulative_cases | number}}\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\";","export default \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-lg-12\\\">\\n      <h1 class=\\\"text-center\\\">Derek's Project Page!</h1>\\n      <h2 class=\\\"text-center\\\">Serving up delicious, byte size chunks of functionality!</h2>\\n      <div class=\\\"list-group\\\">\\n        <a routerLink=\\\"{{link.url}}\\\" href=\\\"#\\\"\\n          class=\\\"list-group-item list-group-item-action list-group-item-primary text-center\\\"\\n          *ngFor=\\\"let link of dereksLinks\\\">\\n          <img class=\\\"img-fluid svg\\\" src=\\\"{{link.imagePath}}\\\" />\\n        </a>\\n      </div>\\n    </div>\\n  </div>\\n</div>\";","export default \"<div class=\\\"container-fluid\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <label for=\\\"stateSelect\\\" class=\\\"sr-only\\\">Select a State</label>\\n            <select class=\\\"custom-select\\\" id=\\\"stateSelect\\\" (change)=\\\"getDunkinByState($event.target.value)\\\">\\n                <option selected class=\\\"text-center\\\">Select a State</option>\\n                <option class=\\\"text-center\\\" *ngFor=\\\"let state of states\\\" class=\\\"text-center\\\" value=\\\"{{state.code}}\\\">\\n                    {{state.name}}\\n                </option>\\n            </select>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <ul class=\\\"list-unstyled\\\">\\n                <li>\\n                    <ul>\\n                        <li *ngFor=\\\"let dunkin of dunkins\\\">{{dunkin.address}}\\n\\n                        </li>\\n                    </ul>\\n                </li>\\n            </ul>\\n        </div>\\n    </div>\\n</div>\";","export default \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-lg-4\\\">\\n      <img class=\\\"img-fluid\\\" src=\\\"/assets/images/dlwedding.jpg\\\"\\n        alt=\\\"Derek and Lori Leggett's wedding picture from June 6th, 1998\\\">\\n    </div>\\n    <div class=\\\"col-lg-8 story\\\">\\n      <p class=\\\"h1\\\">\\n        Hi, our names are Derek and Lori Leggett. We were married on June 6, 1998 and live in Peoria, Arizona.\\n        Lori is a 5th grade teacher. Derek is the computer guy! We are expecting our first child around May 5,\\n        2002. Thank you for visting our web page. We\\n        hope you enjoy it!\\n      </p>\\n    </div>\\n  </div>\\n</div>\";","export default \"<p>\\n  library works!\\n</p>\\n\";","export default \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n\\n    </div>\\n  </div>\\n</div>\";","export default \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-lg-12\\\">\\n      <h1 class=\\\"text-center\\\">Lori's Teacher Resource Page</h1>\\n      <h2 class=\\\"text-center\\\">Looking for new ideas and lessons? Visit...</h2>\\n      <div class=\\\"list-group\\\">\\n\\n        <a target=\\\"_blank\\\" href=\\\"{{link.url}}\\\" class=\\\"list-group-item list-group-item-action list-group-item-primary\\\"\\n          *ngFor=\\\"let link of lorisLinks\\\">\\n\\n          <h4 class=\\\"text-center\\\"><img src=\\\"/assets/images/nn0518.gif\\\" />{{link.linkText}}</h4>\\n        </a>\\n      </div>\\n    </div>\\n  </div>\\n</div>\";","export default \"<div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <label for=\\\"characterSelect\\\" class=\\\"sr-only\\\">Select a Character</label>\\n            <select class=\\\"custom-select\\\" id=\\\"characterSelect\\\" (change)=\\\"getCharacterById($event.target.value)\\\">\\n                <option selected class=\\\"text-center\\\">Select a Character</option>\\n                <option class=\\\"text-center\\\" *ngFor=\\\"let character of characters\\\" class=\\\"text-center\\\"\\n                    value=\\\"{{character.id}}\\\">\\n                    {{character.name}}\\n                </option>\\n            </select>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <div *ngFor=\\\"let characterBy of characterById\\\" class=\\\"text-center\\\">\\n                <h3>{{characterBy.name}}</h3>\\n                <h4>{{characterBy.description}}</h4>\\n                <img class=\\\"img-fluid\\\" title=\\\"{{characterBy.name}}\\\"\\n                    src=\\\"{{characterBy.thumbnail.path}}.{{characterBy.thumbnail.extension}}\\\">\\n                <h4><u>Comics</u></h4>\\n                <div *ngFor=\\\"let comic of characterBy.comics.items\\\">\\n                    {{comic.name}}\\n                </div>\\n                <h4><u>Stories</u></h4>\\n                <div *ngFor=\\\"let story of characterBy.stories.items\\\">\\n                    {{story.name}}\\n                </div>\\n            </div>\\n            <a class=\\\"text-center\\\" href=\\\"http://marvel.com\\\">Data provided by Marvel. © 2019 MARVEL</a>\\n        </div>\\n    </div>\\n</div>\";","export default \"<div class=\\\"container-fluid\\\">\\n    <div class=\\\"row text-center\\\">\\n        <div class=\\\"col\\\">\\n            <h1>Roadrunner Vs Rattlesnake</h1>\\n            <iframe\\n                src=\\\"//assets.ngeo.com/modules-video/latest/assets/ngsEmbeddedVideo.html?guid=ngc-qTegnDBNaOavHCW66ItLcxmvYyI6rKHa\\\"\\n                width=\\\"640\\\" height=\\\"365\\\" frameborder=\\\"0\\\" seamless=\\\"seamless\\\" scrolling=\\\"no\\\" allowfullscreen=\\\"\\\"></iframe>\\n        </div>\\n    </div>\\n    <div class=\\\"row text-center\\\">\\n        <div class=\\\"col\\\">\\n            <h1>Rope-Free Climb</h1>\\n            <iframe\\n                src=\\\"//assets.ngeo.com/modules-video/latest/assets/ngsEmbeddedVideo.html?guid=0000015c-7b06-dd1b-afff-7b4f22f60000\\\"\\n                width=\\\"640\\\" height=\\\"365\\\" frameborder=\\\"0\\\" seamless=\\\"seamless\\\" scrolling=\\\"no\\\" allowfullscreen=\\\"\\\"></iframe>\\n        </div>\\n    </div>\\n</div>\";","export default \"<div class=\\\"container-fluid\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <label for=\\\"stateSelect\\\" class=\\\"sr-only\\\">Select a State</label>\\n            <select class=\\\"custom-select\\\" id=\\\"stateSelect\\\" (change)=\\\"getParks($event.target.value)\\\">\\n                <option selected class=\\\"text-center\\\">Select a State</option>\\n                <option class=\\\"text-center\\\" *ngFor=\\\"let state of states\\\" class=\\\"text-center\\\" value=\\\"{{state.code}}\\\">\\n                    {{state.name}}\\n                </option>\\n            </select>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <div class=\\\"text-center\\\" *ngFor=\\\"let park of parks\\\">\\n                <h2><a target=\\\"_blank\\\" href=\\\"{{park.url}}\\\">{{park.fullName}}</a></h2><br>\\n                <img *ngFor=\\\"let image of park.images\\\" class=\\\"img-fluid img-thumbnail\\\" src=\\\"{{image.url}}\\\"\\n                    alt=\\\"{{image.altText}}\\\"><br>\\n                <h3>{{park.description}}</h3><br>\\n                <h4><a target=\\\"_blank\\\" href=\\\"{{park.directionsUrl}}\\\">Get Directions</a></h4><br>\\n                <h3>Weather Info: </h3><br>\\n                <h4>{{park.weatherInfo}}</h4>\\n            </div>\\n        </div>\\n    </div>\\n    <a href=\\\"https://www.nps.gov/subjects/developer/index.htm\\\" target=\\\"_blank\\\">Data provided by the US National Park\\n        Service</a>\\n</div>\";","export default \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <h2 class=\\\"text-center\\\">SUPER(Single User Performance)</h2>\\n      <p class=\\\"text-center\\\">Performance metrics were obtained by opening clean(no cache) browser, navigating to the\\n        specified url\\n        , waiting for the page to load, then collecting metrics reported by the browser.\\n        Blue bar is Network + Server Processing time.\\n        Red bar is Redirect time.\\n        Yellow bar is Page Load/Browser Rendering time.\\n        All values are in milliseconds.\\n      </p>\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <label for=\\\"industrySelect\\\" class=\\\"sr-only\\\">Select an Industry</label>\\n      <select class=\\\"custom-select\\\" id=\\\"makeSelect\\\" (change)=\\\"getTimingsByIndustryId($event.target.value)\\\">\\n        <option selected class=\\\"text-center\\\">Select an Industry</option>\\n        <option *ngFor=\\\"let industry of industries\\\" class=\\\"text-center\\\" value=\\\"{{industry.id}}\\\">\\n          {{industry.name}}\\n        </option>\\n      </select>\\n    </div>\\n  </div>\\n  <div *ngFor=\\\"let company of performance\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col\\\">\\n        <div>{{company.Company}} - https://{{company.url}}</div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"row\\\" *ngFor=\\\"let perf of company.Timings\\\">\\n      <div class=\\\"col-1\\\">\\n        <img *ngIf=\\\"perf.browserName=='Chrome'\\\" class=\\\"img-fluid svg\\\" src=\\\"assets/images/Chrome.svg\\\"\\n          alt=\\\"Chrome browser logo\\\">\\n        <img *ngIf=\\\"perf.browserName=='Firefox'\\\" class=\\\"img-fluid svg\\\" src=\\\"assets/images/Firefox.svg\\\"\\n          alt=\\\"Firefox browser logo\\\">\\n        <img *ngIf=\\\"perf.browserName=='Edge'\\\" class=\\\"img-fluid svg\\\" src=\\\"assets/images/Edge.svg\\\"\\n          alt=\\\"Edge browser logo\\\">\\n        <img *ngIf=\\\"perf.browserName=='Opera'\\\" class=\\\"img-fluid svg\\\" src=\\\"assets/images/Opera_O.svg\\\"\\n          alt=\\\"Opera browser logo\\\">\\n      </div>\\n      <div class=\\\"col-11\\\">\\n        <div class=\\\"progress\\\" style=\\\"height: 30px;\\\">\\n          <div class=\\\"progress-bar\\\" role=\\\"progressbar\\\"\\n            [style.width.%]=\\\"((perf.networkLatency/company.Timings[0].completeTime)*100)\\\"\\n            aria-valuenow=\\\"((perf.networkLatency/company.Timings[0].completeTime)*100)\\\" aria-valuemin=\\\"0\\\"\\n            aria-valuemax=\\\"100\\\">\\n            {{perf.network}}</div>\\n          <div class=\\\"progress-bar bg-danger\\\" role=\\\"progressbar\\\"\\n            [style.width.%]=\\\"((perf.redirectTime/company.Timings[0].completeTime)*100)\\\"\\n            aria-valuenow=\\\"((perf.redirectTime/company.Timings[0].completeTime)*100)\\\" aria-valuemin=\\\"0\\\"\\n            aria-valuemax=\\\"100\\\">\\n            {{perf.redirectTime}}</div>\\n          <div class=\\\"progress-bar bg-warning\\\" role=\\\"progressbar\\\"\\n            [style.width.%]=\\\"((perf.pageLoadTime/company.Timings[0].completeTime)*100)\\\"\\n            aria-valuenow=\\\"((perf.pageLoadTime/company.Timings[0].completeTime)*100)\\\" aria-valuemin=\\\"0\\\"\\n            aria-valuemax=\\\"100\\\">\\n            <a class=\\\"h4\\\" href=\\\"https://{{company.url}}\\\" target=\\\"_blank\\\">{{perf.pageLoadTime}}</a>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\";","export default \"<div class=\\\"container-fluid\\\">\\n    <div class=\\\"row text-center\\\" *ngFor=\\\"let place of places\\\">\\n        <div class=\\\"col\\\">\\n            <ul class=\\\"list-unstyled\\\">\\n                <a target=\\\"_blank\\\"\\n                    href=\\\"https://www.google.com/maps/search/?api=1&query={{place.latitude}},{{place.longitude}}\\\">\\n                    <li><strong>{{place.name | titlecase}}</strong></li>\\n                </a>\\n                <li>Distance: {{place.distance | number}}mi.</li>\\n                <li>{{place.address | titlecase}}</li>\\n                <li>{{place.city | titlecase}},\\n                    {{place.state}} {{place.zip}}</li>\\n                <li>{{place.country}}</li>\\n                <li>Phone: {{place.phone}}</li>\\n            </ul>\\n        </div>\\n    </div>\\n</div>\";","export default \"<p>population works!</p>\\n\";","export default \"<div class=\\\"container-fluid\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <label for=\\\"stateSelect\\\" class=\\\"sr-only\\\">Select a State</label>\\n            <select class=\\\"custom-select\\\" id=\\\"stateSelect\\\" (change)=\\\"getRecreationalAreas($event.target.value)\\\">\\n                <option selected class=\\\"text-center\\\">Select a State</option>\\n                <option class=\\\"text-center\\\" *ngFor=\\\"let state of states\\\" class=\\\"text-center\\\" value=\\\"{{state.code}}\\\">\\n                    {{state.name}}\\n                </option>\\n            </select>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <ul class=\\\"list-unstyled\\\">\\n                <li>\\n                    <ul class=\\\"list-unstyled\\\">\\n                        <li *ngFor=\\\"let recArea of recreationalAreas\\\">\\n                            <h2><a target=\\\"_blank\\\" href=\\\"{{recArea.RecAreaMapURL}}\\\">{{recArea.RecAreaName}}</a></h2><br>\\n                            <h3>{{recArea.RecAreaDescription}}</h3><br>\\n                        </li>\\n                    </ul>\\n                </li>\\n            </ul>\\n        </div>\\n    </div>\\n    <a target=\\\"_blank\\\" href=\\\"http://ridb.recreation.gov/\\\">Data Source</a>\\n</div>\";","export default \"<div class=\\\"container-fluid\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <label for=\\\"shipTypeSelect\\\" class=\\\"sr-only\\\">Select a Ship Type</label>\\n            <select class=\\\"custom-select\\\" id=\\\"shipTypeSelect\\\" (change)=\\\"getShipsByType($event.target.value)\\\">\\n                <option selected class=\\\"text-center\\\">Select a Ship Type</option>\\n                <option class=\\\"text-center\\\" *ngFor=\\\"let type of shipTypes\\\" class=\\\"text-center\\\" value=\\\"{{type.Code}}\\\">\\n                    {{type.Code}} - {{type.Name}}\\n                </option>\\n            </select>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-lg-12 text-center\\\">\\n            <h2>Active Ships in the U.S. Navy</h2>\\n            <div *ngFor=\\\"let ship of ships\\\" (click)=\\\"selectShip(ship)\\\">\\n                <a target=\\\"_blank\\\" href=\\\"{{ship.DANFSLink}}\\\">{{ship.Name}}</a>\\n            </div>\\n        </div>\\n    </div>\\n</div>\";","export default \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-lg-12\\\">\\n      Aw' Snap!\\n    </div>\\n  </div>\\n</div>\";","export default \"<div class=\\\"container-fluid\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\">\\n            <form>\\n                <div class=\\\"form-group\\\">\\n                    <label for=\\\"filmSelect\\\" class=\\\"sr-only\\\">Select a Film</label>\\n                    <select class=\\\"custom-select\\\" id=\\\"filmSelect\\\" (change)=\\\"getDetails($event.target.value)\\\">\\n                        <option selected class=\\\"text-center\\\">Select a Film</option>\\n                        <option *ngFor=\\\"let film of films\\\" class=\\\"text-center\\\" value=\\\"{{film.episode_id}}\\\">\\n                            {{film.title}}\\n                        </option>\\n                    </select>\\n                </div>\\n            </form>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\" *ngIf=\\\"selectedFilm\\\">\\n            <div>\\n                <h2 id=\\\"title\\\">Episode: {{selectedFilm.episode_id}} - {{selectedFilm.title}} - Directed by:\\n                    {{selectedFilm.director}} - Produced by: {{selectedFilm.producer}} Released:\\n                    {{selectedFilm.release_date | date}}\\n                </h2>\\n                <p>{{selectedFilm.opening_crawl}}</p>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col\\\" *ngIf=\\\"selectedFilm\\\">\\n            <h4 class=\\\"text-center\\\">Characters</h4>\\n            <div class=\\\"text-center\\\" *ngFor=\\\"let character of characters\\\" data-toggle=\\\"modal\\\"\\n                data-target=\\\"#characterModal\\\" (click)=\\\"characterSelected(character)\\\">{{character.name}}</div>\\n            <h4 class=\\\"text-center\\\">Planets</h4>\\n            <div class=\\\"text-center\\\" *ngFor=\\\"let planet of planets\\\" data-toggle=\\\"modal\\\" data-target=\\\"#planetModal\\\"\\n                (click)=\\\"planetSelected(planet)\\\">{{planet.name}}</div>\\n            <h4 class=\\\"text-center\\\">StarShips</h4>\\n            <div class=\\\"text-center\\\" *ngFor=\\\"let starship of starShips\\\" data-toggle=\\\"modal\\\" data-target=\\\"#starshipModal\\\"\\n                (click)=\\\"starShipSelected(starship)\\\">{{starship.name}}</div>\\n            <h4 class=\\\"text-center\\\">Vehicles</h4>\\n            <div class=\\\"text-center\\\" *ngFor=\\\"let vehicle of vehicles\\\" data-toggle=\\\"modal\\\" data-target=\\\"#vehicleModal\\\"\\n                (click)=\\\"vehicleSelected(vehicle)\\\">{{vehicle.name}}</div>\\n            <h4 class=\\\"text-center\\\">Species</h4>\\n            <div class=\\\"text-center\\\" *ngFor=\\\"let specie of species\\\" data-toggle=\\\"modal\\\" data-target=\\\"#specieModal\\\"\\n                (click)=\\\"specieSelected(specie)\\\">{{specie.name}}</div>\\n        </div>\\n    </div>\\n    <a href=\\\"https://swapi.dev/\\\" target=\\\"_blank\\\">Data provided by StarWars API</a>\\n</div>\\n\\n\\n<div class=\\\"container-fluid\\\">\\n\\n    <div class=\\\"modal\\\" id=\\\"characterModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModal-label\\\">\\n        <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n            <div class=\\\"modal-content\\\">\\n                <div class=\\\"modal-header\\\">\\n                    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                        <span aria-hidden=\\\"true\\\" id=\\\"characterModalClose\\\">&times;</span>\\n                    </button>\\n                    <h4 class=\\\"modal-title\\\" id=\\\"myModal-label\\\" *ngIf=\\\"selectedCharacter\\\">Character Details -\\n                        {{selectedCharacter.name}}</h4>\\n                </div>\\n                <div class=\\\"modal-body\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col\\\">\\n                            <table class=\\\"table table-striped table-bordered table-hover table-condensed table-sm\\\">\\n                                <thead class=\\\"thead-dark\\\">\\n                                    <tr>\\n                                        <th>Name</th>\\n                                        <th>Height</th>\\n                                        <th>Weight</th>\\n                                        <th>Hair</th>\\n                                        <th>Skin</th>\\n                                        <th>Eye</th>\\n                                        <th>Birth</th>\\n                                        <th>Gender</th>\\n                                    </tr>\\n                                </thead>\\n                                <tbody>\\n                                    <tr *ngIf=\\\"selectedCharacter\\\">\\n                                        <td>{{selectedCharacter.name | titlecase}}</td>\\n                                        <td>{{selectedCharacter.height}}</td>\\n                                        <td>{{selectedCharacter.mass}}</td>\\n                                        <td>{{selectedCharacter.hair_color | titlecase}}</td>\\n                                        <td>{{selectedCharacter.skin_color | titlecase}}</td>\\n                                        <td>{{selectedCharacter.eye_color | titlecase}}</td>\\n                                        <td>{{selectedCharacter.birth_year}}</td>\\n                                        <td>{{selectedCharacter.gender | titlecase}}</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"modal-footer\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" data-dismiss=\\\"modal\\\"\\n                        id=\\\"characterModalClose\\\">Close</button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"modal\\\" id=\\\"planetModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModal-label\\\">\\n        <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n            <div class=\\\"modal-content\\\">\\n                <div class=\\\"modal-header\\\">\\n                    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                        <span aria-hidden=\\\"true\\\" id=\\\"planetModalClose\\\">&times;</span>\\n                    </button>\\n                    <h4 class=\\\"modal-title\\\" id=\\\"myModal-label\\\" *ngIf=\\\"selectedPlanet\\\">Planet Details -\\n                        {{selectedPlanet.name}}</h4>\\n                </div>\\n                <div class=\\\"modal-body\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col\\\">\\n                            <table class=\\\"table table-striped table-bordered table-hover table-condensed table-sm\\\">\\n                                <thead class=\\\"thead-dark\\\">\\n                                    <tr>\\n                                        <th>Name</th>\\n                                        <th>Rotation Period</th>\\n                                        <th>Orbital Period</th>\\n                                        <th>Diameter</th>\\n                                        <th>Climate</th>\\n                                        <th>Gravity</th>\\n                                        <th>Terrain</th>\\n                                        <th>Surface Water</th>\\n                                        <th>Population</th>\\n                                    </tr>\\n                                </thead>\\n                                <tbody>\\n                                    <tr *ngIf=\\\"selectedPlanet\\\">\\n                                        <td>{{selectedPlanet.name}}</td>\\n                                        <td>{{selectedPlanet.rotation_period | number}}</td>\\n                                        <td>{{selectedPlanet.orbital_period | number}}</td>\\n                                        <td>{{selectedPlanet.diameter | number}}</td>\\n                                        <td>{{selectedPlanet.climate | titlecase}}</td>\\n                                        <td>{{selectedPlanet.gravity | titlecase}}</td>\\n                                        <td>{{selectedPlanet.terrain | titlecase}}</td>\\n                                        <td>{{selectedPlanet.surface_water | number}}</td>\\n                                        <td>{{selectedPlanet.population | number}}</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"modal-footer\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" data-dismiss=\\\"modal\\\"\\n                        id=\\\"planetModalClose\\\">Close</button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"modal\\\" id=\\\"starshipModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModal-label\\\">\\n        <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n            <div class=\\\"modal-content\\\">\\n                <div class=\\\"modal-header\\\">\\n                    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                        <span aria-hidden=\\\"true\\\" id=\\\"starshipModalClose\\\">&times;</span>\\n                    </button>\\n                    <h4 class=\\\"modal-title\\\" id=\\\"myModal-label\\\" *ngIf=\\\"selectedStarShip\\\">StarShip Details -\\n                        {{selectedStarShip.name}}</h4>\\n                </div>\\n                <div class=\\\"modal-body\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col\\\">\\n                            <table class=\\\"table table-striped table-bordered table-hover table-condensed table-sm\\\">\\n                                <thead class=\\\"thead-dark\\\">\\n                                    <tr>\\n                                        <th>Name</th>\\n                                        <th>Model</th>\\n                                        <th>Manufacturer</th>\\n                                        <th>Cost</th>\\n                                        <th>Length</th>\\n                                        <th>Speed</th>\\n                                        <th>Crew</th>\\n                                        <th>Passengers</th>\\n                                    </tr>\\n                                </thead>\\n                                <tbody>\\n                                    <tr *ngIf=\\\"selectedStarShip\\\">\\n                                        <td>{{selectedStarShip.name}}</td>\\n                                        <td>{{selectedStarShip.model | titlecase}}</td>\\n                                        <td>{{selectedStarShip.manufacturer | titlecase}}</td>\\n                                        <td>{{selectedStarShip.cost_in_credits | number}}</td>\\n                                        <td>{{selectedStarShip.length | number}}</td>\\n                                        <td>{{selectedStarShip.max_atmosphering_speed | number}}</td>\\n                                        <td>{{selectedStarShip.crew | number}}</td>\\n                                        <td>{{selectedStarShip.passengers | number}}</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"modal-footer\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" data-dismiss=\\\"modal\\\"\\n                        id=\\\"starshipModalClose\\\">Close</button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"modal\\\" id=\\\"vehicleModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModal-label\\\">\\n        <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n            <div class=\\\"modal-content\\\">\\n                <div class=\\\"modal-header\\\">\\n                    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                        <span aria-hidden=\\\"true\\\" id=\\\"vehicleModalClose\\\">&times;</span>\\n                    </button>\\n                    <h4 class=\\\"modal-title\\\" id=\\\"myModal-label\\\" *ngIf=\\\"selectedVehicle\\\">Vehicle Details -\\n                        {{selectedVehicle.name}}</h4>\\n                </div>\\n                <div class=\\\"modal-body\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col\\\">\\n                            <table class=\\\"table table-striped table-bordered table-hover table-condensed table-sm\\\">\\n                                <thead class=\\\"thead-dark\\\">\\n                                    <tr>\\n                                        <th>Name</th>\\n                                        <th>Model</th>\\n                                        <th>Manufacturer</th>\\n                                        <th>Cost</th>\\n                                        <th>Length</th>\\n                                        <th>Speed</th>\\n                                        <th>Crew</th>\\n                                        <th>Passengers</th>\\n                                    </tr>\\n                                </thead>\\n                                <tbody>\\n                                    <tr *ngIf=\\\"selectedVehicle\\\">\\n                                        <td>{{selectedVehicle.name}}</td>\\n                                        <td>{{selectedVehicle.model | titlecase}}</td>\\n                                        <td>{{selectedVehicle.manufacturer | titlecase}}</td>\\n                                        <td>{{selectedVehicle.cost_in_credits | number}}</td>\\n                                        <td>{{selectedVehicle.length | number}}</td>\\n                                        <td>{{selectedVehicle.max_atmosphering_speed | number}}</td>\\n                                        <td>{{selectedVehicle.crew | number}}</td>\\n                                        <td>{{selectedVehicle.passengers | number}}</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"modal-footer\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" data-dismiss=\\\"modal\\\"\\n                        id=\\\"vehicleModalClose\\\">Close</button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"modal\\\" id=\\\"specieModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModal-label\\\">\\n        <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n            <div class=\\\"modal-content\\\">\\n                <div class=\\\"modal-header\\\">\\n                    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                        <span aria-hidden=\\\"true\\\" id=\\\"specieModalClose\\\">&times;</span>\\n                    </button>\\n                    <h4 class=\\\"modal-title\\\" id=\\\"myModal-label\\\" *ngIf=\\\"selectedSpecie\\\">Specie Details -\\n                        {{selectedSpecie.name}}</h4>\\n                </div>\\n                <div class=\\\"modal-body\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col\\\">\\n                            <table class=\\\"table table-striped table-bordered table-hover table-condensed table-sm\\\">\\n                                <thead class=\\\"thead-dark\\\">\\n                                    <tr>\\n                                        <th>Name</th>\\n                                        <th>Classification</th>\\n                                        <th>Designation</th>\\n                                        <th>Average Height</th>\\n                                        <th>Average Life Span</th>\\n                                        <th>Homeworld</th>\\n                                        <th>Language</th>\\n                                    </tr>\\n                                </thead>\\n                                <tbody>\\n                                    <tr *ngIf=\\\"selectedSpecie\\\">\\n                                        <td>{{selectedSpecie.name}}</td>\\n                                        <td>{{selectedSpecie.classification | titlecase}}</td>\\n                                        <td>{{selectedSpecie.designation | titlecase}}</td>\\n                                        <td>{{selectedSpecie.average_height | number}}</td>\\n                                        <td>{{selectedSpecie.average_lifespan | number}}</td>\\n                                        <td>{{selectedSpecie.homeworld | titlecase}}</td>\\n                                        <td>{{selectedSpecie.language | titlecase}}</td>\\n                                    </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"modal-footer\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" data-dismiss=\\\"modal\\\"\\n                        id=\\\"vehicleModalClose\\\">Close</button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\";","export default \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <form>\\n        <div class=\\\"form-group text-center\\\">\\n          <label for=\\\"countrySelect\\\" class=\\\"sr-only\\\">Select a Country</label>\\n          <select class=\\\"custom-select text-center\\\" id=\\\"countrySelect\\\"\\n            (change)=\\\"getStatesNestedCitiesByCountryCode($event.target.value)\\\">\\n            <option selected class=\\\"text-center\\\">Select a Country</option>\\n            <option *ngFor=\\\"let country of countries\\\" class=\\\"text-center\\\" value=\\\"{{country.Code}}\\\">\\n              {{country.Name}}\\n            </option>\\n          </select>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col text-center\\\" *ngIf=\\\"country\\\">\\n      <h3 id=\\\"countryName\\\" class=\\\"text-center\\\">{{country.Name}}</h3>\\n      <img class=\\\"img-fluid svg\\\" title=\\\"{{country.Name}}\\\"\\n        src=\\\"assets/images/flags/svg/{{country.Code2 | lowercase}}.svg\\\">\\n      <h4 class=\\\"text-center\\\"><u>Languages Spoken</u></h4>\\n      <div class=\\\"progress\\\" *ngFor=\\\"let language of country.Languages\\\">\\n        <div class=\\\"progress-bar bg-warning text-dark\\\" role=\\\"progressbar\\\" [style.width.%]=\\\"language.Percentage\\\"\\n          aria-valuenow=\\\"language.Percentage\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\"><strong>{{language.Language}} -\\n            {{language.Percentage}}%</strong></div>\\n      </div>\\n    </div>\\n  </div>\\n  <h4 *ngIf=\\\"country\\\" class=\\\"text-center\\\"><u>States</u></h4>\\n  <div class=\\\"row\\\" *ngFor=\\\"let state of states\\\">\\n    <div class=\\\"col text-center\\\">\\n      <h3 class=\\\"text-center\\\">{{state.State}}</h3>\\n      <img class=\\\"img-fluid text-center svg\\\" title=\\\"{{state.State}}\\\"\\n        src=\\\"assets/images/flags/svg/{{country.Code2 | lowercase}}/{{state.StateCode | lowercase}}.svg\\\">\\n      <h4 class=\\\"text-center\\\"><u>Population by City</u></h4>\\n      <div class=\\\"progress\\\" *ngFor=\\\"let city of state.Cities\\\">\\n        <div class=\\\"progress-bar bg-warning text-dark\\\" role=\\\"progressbar\\\"\\n          [style.width.%]=\\\"((city.Population/state.Cities[0].Population)*100)\\\"\\n          aria-valuenow=\\\"((city.Population/state.Cities[0].Population)*100)\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\">\\n          <strong>{{city.City}} -\\n            {{city.Population | number}}</strong></div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n<router-outlet></router-outlet>\";","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { LoriComponent } from './lori/lori.component';\nimport { LindseyComponent } from './lindsey/lindsey.component';\nimport { DerekComponent } from './derek/derek.component';\nimport { WorldComponent } from './world/world.component';\nimport { SwapiComponent } from './swapi/swapi.component';\nimport { MarvelComponent } from './marvel/marvel.component';\nimport { ShipsComponent } from './ships/ships.component';\nimport { AutoComponent } from './auto/auto.component';\nimport { DunkinComponent } from './dunkin/dunkin.component';\nimport { NpsComponent } from './nps/nps.component';\nimport { RecreationComponent } from './recreation/recreation.component';\nimport { SnapComponent } from './snap/snap.component';\nimport { LibraryComponent } from './library/library.component';\nimport { PerformanceComponent } from './performance/performance.component';\nimport { CovidComponent } from './covid/covid.component';\nimport { PlacesComponent } from './places/places.component';\nimport { NatgeoComponent } from './natgeo/natgeo.component';\nimport { PopulationComponent } from './population/population.component';\n\nconst routes: Routes = [\n  { path: '', pathMatch: 'full', redirectTo: 'home', },\n  { path: 'home', component: HomeComponent },\n  { path: 'lori', component: LoriComponent },\n  { path: 'lindsey', component: LindseyComponent },\n  { path: 'derek', component: DerekComponent },\n  { path: 'world', component: WorldComponent },\n  { path: 'starwars', component: SwapiComponent },\n  { path: 'marvel', component: MarvelComponent },\n  { path: 'ships', component: ShipsComponent },\n  { path: 'auto', component: AutoComponent },\n  { path: 'dunkin', component: DunkinComponent },\n  { path: 'nps', component: NpsComponent },\n  { path: 'recreation', component: RecreationComponent },\n  { path: 'snap', component: SnapComponent },\n  { path: 'library', component: LibraryComponent },\n  { path: 'performance', component: PerformanceComponent },\n  { path: 'covid', component: CovidComponent },\n  { path: 'places', component: PlacesComponent },\n  { path: 'natgeo', component: NatgeoComponent },\n  { path: 'population', component: PopulationComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'dorey';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { LoriComponent } from './lori/lori.component';\nimport { LindseyComponent } from './lindsey/lindsey.component';\nimport { DerekComponent } from './derek/derek.component';\nimport { HomeComponent } from './home/home.component';\nimport { WorldComponent } from './world/world.component';\nimport { SwapiComponent } from './swapi/swapi.component';\nimport { MarvelComponent } from './marvel/marvel.component';\nimport { ShipsComponent } from './ships/ships.component';\nimport { AutoComponent } from './auto/auto.component';\nimport { DunkinComponent } from './dunkin/dunkin.component';\nimport { NpsComponent } from './nps/nps.component';\nimport { RecreationComponent } from './recreation/recreation.component';\nimport { SnapComponent } from './snap/snap.component';\nimport { LibraryComponent } from './library/library.component';\nimport { PerformanceComponent } from './performance/performance.component';\nimport { PlacesComponent } from './places/places.component';\nimport { NatgeoComponent } from './natgeo/natgeo.component';\nimport { PopulationComponent } from './population/population.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoriComponent,\n    LindseyComponent,\n    DerekComponent,\n    HomeComponent,\n    WorldComponent,\n    SwapiComponent,\n    MarvelComponent,\n    ShipsComponent,\n    AutoComponent,\n    DunkinComponent,\n    NpsComponent,\n    RecreationComponent,\n    SnapComponent,\n    LibraryComponent,\n    PerformanceComponent,\n    PlacesComponent,\n    NatgeoComponent,\n    PopulationComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dG8vYXV0by5jb21wb25lbnQuY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { IAutoManufacturer, IAutoManufacturerDetails, IMake, IAutoType, IMakeByType, IModel } from './auto';\nimport { AutoService } from './auto.service';\n\n@Component({\n  selector: 'app-auto',\n  templateUrl: './auto.component.html',\n  styleUrls: ['./auto.component.css']\n})\nexport class AutoComponent implements OnInit {\n  autoManufacturers: IAutoManufacturer[];\n  manufacturerDetails: IAutoManufacturerDetails[];\n  makes: IMake[];\n  types: IAutoType[];\n  makesByType: IMakeByType[];\n  models: IModel[];\n  constructor(private autoService: AutoService) { }\n\n  ngOnInit() {\n    this.getVehicleTypes();\n  }\n  getVehicleTypes() {\n    this.autoService.getVehicleTypes()\n    .subscribe(response => this.types = response);\n  }\n\n  getMakesByType(type: string) {\n    this.autoService.getMakesByType(type)\n    .subscribe(response => this.makesByType = response);\n  }\n\n  getModelsByMakeId(makeId: string) {\n    this.autoService.getModelsByMakeId(makeId)\n    .subscribe(response => this.models = response);\n  }\n  getAutoManufacturers(): void {\n    this.autoService.getAllManufacturers()\n      .subscribe(autoManufacturer => this.autoManufacturers = autoManufacturer);\n  }\n  getManufacturerDetails(name: string) {\n    this.autoService.getManufacturerDetails(name)\n    .subscribe(details => this.manufacturerDetails = details);\n  }\n  getMakesByManufacturer(name: string) {\n    this.autoService.getMakesByManufacturer(name)\n    .subscribe(details => this.makes = details);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { IAutoManufacturer, IAutoManufacturerDetails, IMake, IAutoType, IMakeByType, IModel } from './auto';\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class AutoService {\n\n  constructor(private http: HttpClient) { }\n  getManufacturersURL = 'https://vpic.nhtsa.dot.gov/api/vehicles/getallmanufacturers?format=json';\n  getManufacturerDetailsURL = 'https://vpic.nhtsa.dot.gov/api/vehicles/getmanufacturerdetails/';\n  getMakeForManufacturerURL = 'https://vpic.nhtsa.dot.gov/api/vehicles/getmakeformanufacturer/';\n  getMakeByTypeURL = 'https://vpic.nhtsa.dot.gov/api/vehicles/GetMakesForVehicleType/';\n  getModelsByMakeIdURL = 'https://vpic.nhtsa.dot.gov/api/vehicles/GetModelsForMakeId/';\n  getAllManufacturers(): Observable<IAutoManufacturer[]> {\n    return this.http.get<IAutoManufacturer[]>(this.getManufacturersURL)\n      .pipe(\n        map(response => response['Results']),\n        catchError(this.handleError('getAllManufacturers', []))\n      );\n  }\n\n  getVehicleTypes(): Observable<IAutoType[]> {\n    return this.http.get<IAutoType[]>('assets/data/autoTypes.json')\n      .pipe(\n        map(response => response),\n        catchError(this.handleError('getVehicleTypes', []))\n      );\n  }\n  getMakesByType(type: string): Observable<IMakeByType[]> {\n    return this.http.get<IMakeByType[]>(this.getMakeByTypeURL + type + '?format=json')\n      .pipe(\n        map(response => response['Results']),\n        catchError(this.handleError('getMakesByType', []))\n      );\n  }\n  getModelsByMakeId(makeId: string) {\n    return this.http.get<IModel[]>(this.getModelsByMakeIdURL + makeId + '?format=json')\n      .pipe(\n        map(response => response['Results']),\n        catchError(this.handleError('getModelsByMakeId', []))\n      );\n  }\n  getManufacturerDetails(name: string): Observable<IAutoManufacturerDetails[]> {\n    return this.http.get<IAutoManufacturerDetails[]>(this.getManufacturerDetailsURL + name + '?format=json')\n      .pipe(\n        map(response => response['Results']),\n        catchError(this.handleError('getManufacturerDetails', []))\n      );\n  }\n\n  getMakesByManufacturer(name: string): Observable<IMake[]> {\n    return this.http.get<IMake[]>(this.getMakeForManufacturerURL + name + '?format=json')\n      .pipe(\n        map(response => response['Results']),\n        catchError(this.handleError('getMakesByManufacturer', []))\n      );\n  }\n\n  decodeVIN() {\n\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      //this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","export default \".svg {\\n    width: 100%;\\n    height: auto;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY292aWQvY292aWQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvY292aWQvY292aWQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zdmcge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogYXV0bztcbn0iXX0= */\";","import { Component, OnInit } from '@angular/core';\nimport { ICovidCounts } from './covid';\nimport { CovidService } from './covid.service';\n\n@Component({\n  selector: 'app-covid',\n  templateUrl: './covid.component.html',\n  styleUrls: ['./covid.component.css']\n})\n\nexport class CovidComponent implements OnInit {\n\n  covidCounts: ICovidCounts[] = [];\n  constructor(private covidService: CovidService) { }\n\n  ngOnInit() {\n    this.getCovidCounts();\n  }\n\n  getCovidCounts() {\n    this.covidService.getCovidCounts()\n      .subscribe(response => this.covidCounts = response);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { ICovidCounts } from './covid';\n@Injectable({\n  providedIn: 'root'\n})\nexport class CovidService {\n\n  constructor(private http: HttpClient) { }\n\n  getCovidCounts(): Observable<ICovidCounts[]> {\n    return this.http.get<ICovidCounts[]>('/api/getCovidCounts.php')\n      .pipe(\n        map(response => response)\n      );\n  }\n}\n","export default \".svg {\\n    width: 50%;\\n    height: auto;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZGVyZWsvZGVyZWsuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFVBQVU7SUFDVixZQUFZO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvZGVyZWsvZGVyZWsuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zdmcge1xuICAgIHdpZHRoOiA1MCU7XG4gICAgaGVpZ2h0OiBhdXRvO1xufSJdfQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { IDerekslinks } from './derek';\nimport { DerekService } from './derek.service';\n\n@Component({\n  selector: 'app-derek',\n  templateUrl: './derek.component.html',\n  styleUrls: ['./derek.component.css']\n})\nexport class DerekComponent implements OnInit {\n  dereksLinks: IDerekslinks[] = [];\n  constructor(private derekService: DerekService) { }\n\n  ngOnInit() {\n    this.getLinks();\n  }\n\n  getLinks() {\n    this.derekService.getLinks()\n      .subscribe(response => this.dereksLinks = response);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { IDerekslinks } from './derek';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class DerekService {\n\n  constructor(private http: HttpClient) { }\n\n  getLinks(): Observable<IDerekslinks[]> {\n    return this.http.get<IDerekslinks[]>('assets/data/derekslinks.json')\n      .pipe(\n        map(response => response),\n        catchError(this.handleError('getLinks', []))\n      );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      //this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2R1bmtpbi9kdW5raW4uY29tcG9uZW50LmNzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport { Dunkin } from './dunkin';\nimport { DunkinService } from './dunkin.service';\nimport { StateService } from '../shared/state.service';\nimport { IState } from '../shared/state';\n\n@Component({\n  selector: 'app-dunkin',\n  templateUrl: './dunkin.component.html',\n  styleUrls: ['./dunkin.component.css']\n})\nexport class DunkinComponent implements OnInit {\n  dunkins: Dunkin[];\n  states: IState[] = [];\n\n  constructor(private dunkinService: DunkinService, private stateService: StateService) { }\n\n  ngOnInit() {\n    this.getStates();\n  }\n\n  getStates() {\n    this.stateService.getStates()\n      .subscribe(response => this.states = response);\n  }\n\n  getDunkinByState(state: string): void {\n    this.dunkinService.getDunkinByState(state)\n      .subscribe(dunkin => this.dunkins = dunkin);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { Dunkin } from './dunkin';\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class DunkinService {\n\n  constructor(private http: HttpClient) { }\n  getDunkin(): Observable<Dunkin[]> {\n    return this.http.get<Dunkin[]>('api/dunkin')\n      .pipe(\n        map(response => response),\n        catchError(this.handleError('getDunkin', []))\n      );\n  }\n  getDunkinByState(state: string): Observable<Dunkin[]> {\n    return this.http.get<Dunkin[]>('api/dunkin/byState?state=' + state)\n      .pipe(\n        map(response => response),\n        catchError(this.handleError('getDunkin', []))\n      );\n  }\n  getDunkinNearGeo(latitude: string, longitude: string): Observable<Dunkin[]> {\n    return this.http.get<Dunkin[]>('api/getDunkinDonutLocations.php?lat=' + latitude + \"&long=\" + longitude)\n      .pipe(\n        map(response => response),\n        catchError(this.handleError('getDunkin', []))\n      );\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      //this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hvbWUvaG9tZS5jb21wb25lbnQuY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xpYnJhcnkvbGlicmFyeS5jb21wb25lbnQuY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-library',\n  templateUrl: './library.component.html',\n  styleUrls: ['./library.component.css']\n})\nexport class LibraryComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xpbmRzZXkvbGluZHNleS5jb21wb25lbnQuY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-lindsey',\n  templateUrl: './lindsey.component.html',\n  styleUrls: ['./lindsey.component.css']\n})\nexport class LindseyComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvcmkvbG9yaS5jb21wb25lbnQuY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { ILorislinks } from './lori';\nimport { LoriService } from './lori.service';\n\n@Component({\n  selector: 'app-lori',\n  templateUrl: './lori.component.html',\n  styleUrls: ['./lori.component.css']\n})\nexport class LoriComponent implements OnInit {\n  lorisLinks: ILorislinks[] = [];\n  constructor(private loriService: LoriService) { }\n\n  ngOnInit() {\n    this.getLinks();\n  }\n\n  getLinks() {\n    this.loriService.getLinks()\n      .subscribe(response => this.lorisLinks = response);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { ILorislinks } from './lori';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoriService {\n\n  constructor(private http: HttpClient) { }\n\n  getLinks(): Observable<ILorislinks[]> {\n    return this.http.get<ILorislinks[]>('assets/data/lorislinks.json')\n      .pipe(\n        map(response => response),\n        catchError(this.handleError('getLinks', []))\n      );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      //this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21hcnZlbC9tYXJ2ZWwuY29tcG9uZW50LmNzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport { ISeries, ICharacter, ICharacterById } from './marvel';\nimport { MarvelService } from './marvel.service';\n@Component({\n  selector: 'app-marvel',\n  templateUrl: './marvel.component.html',\n  styleUrls: ['./marvel.component.css']\n})\nexport class MarvelComponent implements OnInit {\n  series: ISeries[] = [];\n  characters: ICharacter[] = [];\n  characterById: ICharacterById[] = [];\n  constructor(private marvelService: MarvelService) { }\n\n  ngOnInit() {\n    this.getCharacters();\n  }\n\n  getCharacters() {\n    this.marvelService.getCharacters()\n      .subscribe(response => this.characters = response);\n  }\n  getCharacterById(id: number) {\n    this.marvelService.getCharacterById(id)\n      .subscribe(response => this.characterById = response)\n  }\n  getSeries() {\n    this.marvelService.getSeries()\n      .subscribe(response => this.series = response);\n  }\n  getDetails(serie: ISeries) {\n\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { ISeries, ICharacter, ICharacterById } from './marvel';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class MarvelService {\n  baseUrl: string = \"https://gateway.marvel.com:443/v1/public/\";\n  apiKey: string = \"1acc0272c26b58f06f418cf285aaf60c\";\n\n  constructor(private http: HttpClient) { }\n\n  getCharacters(): Observable<ICharacter[]> {\n    return this.http.get<ICharacter[]>('assets/data/superHeroes.json')\n      .pipe(\n        map(response => response),\n        catchError(this.handleError('getCharacters', []))\n      );\n  }\n  getCharacterById(id: number): Observable<ICharacterById[]> {\n    return this.http.get<ICharacterById[]>(this.baseUrl + \"characters/\" + id + \"?apikey=\" + this.apiKey)\n      .pipe(\n        tap(response => console.log(response)),\n        map(response => response['data']),\n        map(response => response['results']),\n        catchError(this.handleError('getCharacterById', []))\n      );\n  }\n  getSeries(): Observable<ISeries[]> {\n    return this.http.get<ISeries[]>(this.baseUrl + \"series?apikey=\" + this.apiKey)\n      .pipe(\n        tap(response => console.log(response)),\n        map(response => response['data']),\n        map(response => response['results']),\n        catchError(this.handleError('getSeries', []))\n      );\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      //this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL25hdGdlby9uYXRnZW8uY29tcG9uZW50LmNzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport { IVideo } from './natgeo';\nimport { NatgeoService } from './natgeo.service';\n@Component({\n  selector: 'app-natgeo',\n  templateUrl: './natgeo.component.html',\n  styleUrls: ['./natgeo.component.css']\n})\nexport class NatgeoComponent implements OnInit {\n  videos: IVideo[] = [];\n  constructor(private natgeoService: NatgeoService) { }\n\n  ngOnInit() {\n    this.getVideos();\n  }\n\n  getVideos() {\n    this.natgeoService.getVideos()\n      .subscribe(response => this.videos = response);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { IVideo } from './natgeo';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class NatgeoService {\n\n  constructor(private http: HttpClient) { }\n\n  getVideos(): Observable<IVideo[]> {\n    return this.http.get<IVideo[]>('assets/data/natGeoVideos.json')\n      .pipe(\n        map(response => response),\n        catchError(this.handleError('getCharacters', []))\n      );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      //this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","export default \".flag {\\n    width: 200px;\\n    height: 200px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbnBzL25wcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWTtJQUNaLGFBQWE7QUFDakIiLCJmaWxlIjoic3JjL2FwcC9ucHMvbnBzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZmxhZyB7XG4gICAgd2lkdGg6IDIwMHB4O1xuICAgIGhlaWdodDogMjAwcHg7XG59Il19 */\";","import { Component, OnInit } from '@angular/core';\nimport { NpsService } from './nps.service';\nimport { StateService } from '../shared/state.service';\nimport { IPark } from './nps';\nimport { IState } from '../shared/state';\n@Component({\n  selector: 'app-nps',\n  templateUrl: './nps.component.html',\n  styleUrls: ['./nps.component.css']\n})\nexport class NpsComponent implements OnInit {\n  parks: IPark[] = [];\n  states: IState[] = [];\n\n  constructor(private npsService: NpsService, private stateService: StateService) { }\n\n  ngOnInit() {\n    this.getStates();\n  }\n\n  getParks(stateCode: string) {\n    this.npsService.getParks(stateCode)\n      .subscribe(response => this.parks = response);\n  }\n\n  getStates() {\n    this.stateService.getStates()\n      .subscribe(response => this.states = response);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { IPark } from './nps';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class NpsService {\n  baseUrl: string = \"https://developer.nps.gov/api/v1/parks?fields=images&limit=50&api_key=8sBuYXBQNGxwSU3ER3S6Xjd4Ys3COHuINh3KX9hn\";\n  constructor(private http: HttpClient) { }\n\n  getParks(stateCode: string): Observable<IPark[]> {\n    return this.http.get<IPark[]>(this.baseUrl + \"&stateCode=\" + stateCode)\n      .pipe(\n        map(response => response['data']),\n        catchError(this.handleError('getParks', []))\n      );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      //this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","export default \".svg {\\n    width: 50%;\\n    height: auto;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGVyZm9ybWFuY2UvcGVyZm9ybWFuY2UuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFVBQVU7SUFDVixZQUFZO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvcGVyZm9ybWFuY2UvcGVyZm9ybWFuY2UuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zdmcge1xuICAgIHdpZHRoOiA1MCU7XG4gICAgaGVpZ2h0OiBhdXRvO1xufSJdfQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { ICompany, IIndustry } from './performance';\nimport { PerformanceService } from './performance.service';\n\n@Component({\n  selector: 'app-performance',\n  templateUrl: './performance.component.html',\n  styleUrls: ['./performance.component.css']\n})\nexport class PerformanceComponent implements OnInit {\n  performance: ICompany[] = [];\n  industries: IIndustry[] = [];\n  constructor(private performanceService: PerformanceService) { }\n\n  ngOnInit() {\n    this.getIndustries();\n  }\n\n  getTimingsByIndustryId(industryId: number) {\n    this.performanceService.getTimingsByIndustryId(industryId)\n      .subscribe(response => this.performance = response);\n  }\n  getIndustries() {\n    this.performanceService.getIndustries()\n      .subscribe(response => this.industries = response);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { ICompany, IIndustry } from './performance';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class PerformanceService {\n\n  constructor(private http: HttpClient) { }\n\n  getTimingsByIndustryId(industryId: number): Observable<ICompany[]> {\n    return this.http.get<ICompany[]>('/api/getTimingsByIndustryId.php?industryId=' + industryId)\n      .pipe(\n        map(response => response),\n        catchError(this.handleError('getTimingsByIndustryId', []))\n      );\n  }\n  getIndustries(): Observable<IIndustry[]> {\n    return this.http.get<IIndustry[]>('/api/getIndustries.php')\n      .pipe(\n        map(response => response),\n        catchError(this.handleError('getIndustries', []))\n      );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      //this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","export default \".svg {\\n    width: 25%;\\n    height: auto;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGxhY2VzL3BsYWNlcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksVUFBVTtJQUNWLFlBQVk7QUFDaEIiLCJmaWxlIjoic3JjL2FwcC9wbGFjZXMvcGxhY2VzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuc3ZnIHtcbiAgICB3aWR0aDogMjUlO1xuICAgIGhlaWdodDogYXV0bztcbn0iXX0= */\";","import { Component, OnInit } from '@angular/core';\nimport { IPlace } from './places';\nimport { PlacesService } from './places.service';\n\n@Component({\n  selector: 'app-places',\n  templateUrl: './places.component.html',\n  styleUrls: ['./places.component.css']\n})\nexport class PlacesComponent implements OnInit {\n\n  lat: number;\n  long: number;\n  places: IPlace[] = [];\n\n  constructor(private placesService: PlacesService) {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(pos => {\n        this.long = +pos.coords.longitude;\n        this.lat = +pos.coords.latitude;\n        this.getPlaces()\n      });\n    }\n  }\n\n  ngOnInit() { }\n\n  getPlaces() {\n    this.placesService.getPlaces(this.lat, this.long)\n      .subscribe(response => this.places = response);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { IPlace } from './places';\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlacesService {\n\n  constructor(private http: HttpClient) { }\n\n  getPlaces(lat: number, long: number): Observable<IPlace[]> {\n    return this.http.get<IPlace[]>('/api/getPlaces.php?lat=' + lat + '&long=' + long)\n      .pipe(\n        map(response => response)\n      );\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BvcHVsYXRpb24vcG9wdWxhdGlvbi5jb21wb25lbnQuY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-population',\n  templateUrl: './population.component.html',\n  styleUrls: ['./population.component.css']\n})\nexport class PopulationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \".flag {\\n    width: 200px;\\n    height: 200px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcmVjcmVhdGlvbi9yZWNyZWF0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osYUFBYTtBQUNqQiIsImZpbGUiOiJzcmMvYXBwL3JlY3JlYXRpb24vcmVjcmVhdGlvbi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmZsYWcge1xuICAgIHdpZHRoOiAyMDBweDtcbiAgICBoZWlnaHQ6IDIwMHB4O1xufSJdfQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { IOrganization, IRecreationalArea } from './recreation';\nimport { RecreationService } from './recreation.service';\nimport { StateService } from '../shared/state.service';\nimport { IState } from '../shared/state';\n\n@Component({\n  selector: 'app-recreation',\n  templateUrl: './recreation.component.html',\n  styleUrls: ['./recreation.component.css']\n})\nexport class RecreationComponent implements OnInit {\n\n  organizations: IOrganization[] = [];\n  recreationalAreas: IRecreationalArea[] = [];\n  states: IState[] = [];\n  constructor(private recreationService: RecreationService, private stateService: StateService) { }\n\n  ngOnInit() {\n    this.getStates();\n  }\n  getOrganizations() {\n    this.recreationService.getOrganizations()\n      .subscribe(response => this.organizations = response);\n  }\n  getRecreationalAreas(stateCode: string) {\n    this.recreationService.getRecreationalAreasByState(stateCode)\n      .subscribe(response => this.recreationalAreas = response);\n  }\n  getStates() {\n    this.stateService.getStates()\n      .subscribe(response => this.states = response);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { IOrganization, IRecreationalArea } from './recreation';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class RecreationService {\n  apiKey: string = '3C9D95801FC943DEA870FB27310E8761';\n  //http://usda.github.io/RIDB/\n  constructor(private http: HttpClient) { }\n  getOrganizations(): Observable<IOrganization[]> {\n    return this.http.get<IOrganization[]>('https://ridb.recreation.gov/api/v1/organizations/?apiKey=' + this.apiKey)\n      .pipe(\n        map(response => response['RECDATA']),\n        catchError(this.handleError('getOrganizations', []))\n      );\n  }\n  getRecreationalAreasByState(stateCode: string): Observable<IRecreationalArea[]> {\n    return this.http.get<IRecreationalArea[]>('https://ridb.recreation.gov/api/v1/recareas?state=' + stateCode + '&apiKey=' + this.apiKey)\n      .pipe(\n        map(response => response['RECDATA']),\n        catchError(this.handleError('getRecreationalAreasByState', []))\n      )\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      //this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { IState } from './state';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class StateService {\n\n  constructor(private http: HttpClient) { }\n  getStates(): Observable<IState[]> {\n    return this.http.get<IState[]>('assets/data/states.json')\n      .pipe(\n        map(response => response),\n        catchError(this.handleError('getStates', []))\n      );\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      //this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","export default \"/* .container-fluid {\\n    background-image: url('/assets/images/Emblem_of_the_United_States_Navy.svg');\\n    background-repeat: no-repeat;\\n    background-attachment: fixed;\\n    background-position: center;\\n} */\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvc2hpcHMvc2hpcHMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7R0FLRyIsImZpbGUiOiJzcmMvYXBwL3NoaXBzL3NoaXBzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAuY29udGFpbmVyLWZsdWlkIHtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy9hc3NldHMvaW1hZ2VzL0VtYmxlbV9vZl90aGVfVW5pdGVkX1N0YXRlc19OYXZ5LnN2ZycpO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XG59ICovIl19 */\";","import { Component, OnInit } from '@angular/core';\nimport { IShip, IShipType } from './ships';\nimport { ShipsService } from './ships.service';\n\n@Component({\n  selector: 'app-ships',\n  templateUrl: './ships.component.html',\n  styleUrls: ['./ships.component.css']\n})\nexport class ShipsComponent implements OnInit {\n  ships: IShip[] = [];\n  selectedShip: IShip;\n  shipTypes: IShipType[] = [];\n  constructor(private shipsService: ShipsService) { }\n\n  ngOnInit() {\n    this.getShipTypes();\n  }\n\n  getShipTypes() {\n    this.shipsService.getShipTypes()\n      .subscribe(response => this.shipTypes = response)\n  }\n  getShipsByType(shipType: string) {\n    this.shipsService.getShipsByType(shipType)\n      .subscribe(response => this.ships = response);\n  }\n  selectShip(ship: IShip) {\n    this.selectedShip = ship;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { IShip, IShipType } from './ships';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShipsService {\n\n  constructor(private http: HttpClient) { }\n\n  getShipTypes(): Observable<IShipType[]> {\n    return this.http.get<IShipType[]>('api/getShipTypes.php')\n      .pipe(\n        map(response => response),\n        catchError(this.handleError('getShipTypes', []))\n      );\n  }\n  getShipsByType(shipType: string): Observable<IShip[]> {\n    return this.http.get<IShip[]>('api/getShipsByType.php?shipType=' + shipType)\n      .pipe(\n        map(response => response),\n        catchError(this.handleError('getShipsByType', []))\n      );\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      //this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NuYXAvc25hcC5jb21wb25lbnQuY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-snap',\n  templateUrl: './snap.component.html',\n  styleUrls: ['./snap.component.css']\n})\nexport class SnapComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N3YXBpL3N3YXBpLmNvbXBvbmVudC5jc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { IFilm, ICharacter, IPlanet, IStarship, IVehicle, ISpecies } from './swapi';\nimport { SwapiService } from './swapi.service';\n@Component({\n  selector: 'app-swapi',\n  templateUrl: './swapi.component.html',\n  styleUrls: ['./swapi.component.css']\n})\nexport class SwapiComponent implements OnInit {\n  films: IFilm[];\n  selectedFilm: IFilm;\n  characters: ICharacter[] = [];\n  selectedCharacter: ICharacter;\n  planets: IPlanet[];\n  selectedPlanet: IPlanet;\n  starShips: IStarship[];\n  selectedStarShip: IStarship;\n  vehicles: IVehicle[];\n  selectedVehicle: IVehicle;\n  species: ISpecies[];\n  selectedSpecie: ISpecies;\n  constructor(private swapiService: SwapiService) { }\n\n  ngOnInit() {\n    this.getFilms();\n  }\n\n  getFilms() {\n    this.swapiService.getFilms()\n      .subscribe(response => this.films = response.sort());\n  }\n  getDetails(episode_id: number) {\n    this.selectedFilm = this.films.find(film => film.episode_id == episode_id);\n    this.getCharacters(this.selectedFilm);\n    this.getPlanets(this.selectedFilm);\n    this.getStarships(this.selectedFilm);\n    this.getSpecies(this.selectedFilm);\n    this.getVehicles(this.selectedFilm);\n  }\n  getCharacters(film: IFilm) {\n    this.characters = [];\n    for (let entry of film.characters) {\n      this.swapiService.getCharacter(entry)\n        .subscribe(response => this.characters.push(response));\n    }\n  }\n  characterSelected(character: ICharacter) {\n    this.selectedCharacter = character;\n  }\n  getPlanets(film: IFilm) {\n    this.planets = [];\n    for (let entry of film.planets) {\n      this.swapiService.getPlanet(entry)\n        .subscribe(response => this.planets.push(response));\n    }\n  }\n  planetSelected(planet: IPlanet) {\n    this.selectedPlanet = planet;\n  }\n  getStarships(film: IFilm) {\n    this.starShips = [];\n    for (let entry of film.starships) {\n      this.swapiService.getStarship(entry)\n        .subscribe(response => this.starShips.push(response));\n    }\n  }\n  starShipSelected(starShip: IStarship) {\n    this.selectedStarShip = starShip;\n  }\n  getVehicles(film: IFilm) {\n    this.vehicles = [];\n    for (let entry of film.vehicles) {\n      this.swapiService.getVehicle(entry)\n        .subscribe(response => this.vehicles.push(response));\n    }\n  }\n  vehicleSelected(vehicle: IVehicle) {\n    this.selectedVehicle = vehicle;\n  }\n  getSpecies(film: IFilm) {\n    this.species = [];\n    for (let entry of film.species) {\n      this.swapiService.getSpecies(entry)\n        .subscribe(response => this.species.push(response));\n    }\n  }\n  specieSelected(specie: ISpecies) {\n    this.selectedSpecie = specie;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { IFilm, ICharacter, IPlanet, ISpecies, IStarship, IVehicle } from './swapi';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable({\n  providedIn: 'root'\n})\nexport class SwapiService {\n  baseUrl = 'https://swapi.dev/api/';\n  constructor(private http: HttpClient) { }\n  getFilms(): Observable<IFilm[]> {\n    return this.http.get<IFilm[]>(this.baseUrl + 'films/')\n      .pipe(\n        //tap(response => this.log(`fetched films`)),\n        map(response => response['results']),\n        catchError(this.handleError('getFilms', []))\n      );\n  }\n  getCharacter(url: string): Observable<ICharacter> {\n    return this.http.get<ICharacter>(url);\n  }\n  getPlanet(url: string): Observable<IPlanet> {\n    return this.http.get<IPlanet>(url);\n  }\n  getSpecies(url: string): Observable<ISpecies> {\n    return this.http.get<ISpecies>(url);\n  }\n  getStarship(url: string): Observable<IStarship> {\n    return this.http.get<IStarship>(url);\n  }\n  getVehicle(url: string): Observable<IVehicle> {\n    return this.http.get<IVehicle>(url);\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      //this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}","export default \".svg {\\n    width: 50%;\\n    height: auto;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvd29ybGQvd29ybGQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFVBQVU7SUFDVixZQUFZO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvd29ybGQvd29ybGQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zdmcge1xuICAgIHdpZHRoOiA1MCU7XG4gICAgaGVpZ2h0OiBhdXRvO1xufSJdfQ== */\";","import { Component } from '@angular/core';\nimport { ICountry, IState } from './world';\nimport { WorldService } from './world.service';\n@Component({\n  selector: 'app-world',\n  templateUrl: './world.component.html',\n  styleUrls: ['./world.component.css']\n})\nexport class WorldComponent {\n  title = 'World';\n  countries: ICountry[] = [];\n  states: IState[] = [];\n  country: ICountry;\n  constructor(private worldService: WorldService) { }\n\n  ngOnInit() {\n    this.getCountriesNestedLanguages();\n  }\n\n  getCountriesNestedLanguages() {\n    this.worldService.getCountriesNestedLanguages()\n      .subscribe(response => this.countries = response);\n  }\n\n  getStatesNestedCitiesByCountryCode(countryCode: string) {\n    this.country = this.countries.find(country => country.Code === countryCode);\n    this.worldService.getStatesNestedCitiesByCountryCode(countryCode)\n      .subscribe(response => this.states = response);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { ICountry, IState } from './world';\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorldService {\n\n  constructor(private http: HttpClient) { }\n\n  getCountriesNestedLanguages(): Observable<ICountry[]> {\n    return this.http.get<ICountry[]>('/api/getCountriesNestedLanguages.php')\n      .pipe(\n        map(response => response)\n      );\n  }\n\n  getStatesNestedCitiesByCountryCode(countryCode: string): Observable<IState[]> {\n    return this.http.get<IState[]>('/api/getStatesNestedCitiesByCountryCode.php?countryCode=' + countryCode)\n      .pipe(\n        map(response => response)\n      );\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}